#include <stdio.h>
#include <math.h>
#include <time.h>
#include <unistd.h>
#include <cuda_runtime_api.h>
#include <errno.h>
#include <unistd.h>

/******************************************************************************
 * This program takes an initial estimate of m and c and finds the associated 
 * rms error. It is then as a base to generate and evaluate 8 new estimates, 
 * which are steps in different directions in m-c space. The best estimate is 
 * then used as the base for another iteration of "generate and evaluate". This 
 * continues until none of the new estimates are better than the base. This is
 * a gradient search for a minimum in mc-space.
 * 
 * To compile:
 *   nvcc -o Linear_Regression_Cuda Linear_Regression_Cuda.cu -lm
 * 
 * To run:
 *   ./Linear_Regression_Cuda
 * 
 *****************************************************************************/

typedef struct point_t {
  double a;
  double y;
} point_t;

int n_data = 1000;
__device__ int d_n_data = 1000;
//actual data 

point_t data[] = {
 {77.89,116.59},{79.43,135.16},{72.58,124.16},{65.87,84.94},
  {77.91,105.07},{77.61,100.91},{65.19,87.28},{68.24,108.54},
  {68.18,108.96},{65.14,87.12},{70.73,111.81},{73.74,114.69},
  {82.49,132.76},{73.35,112.78},{56.83,82.52},{67.19,101.44},
  {77.61,102.34},{27.05,44.84},{29.21,55.05},{25.30,48.07},
  {65.59,93.37},{35.28,89.77},{31.64,50.85},{36.60,59.51},
  {41.65,86.34},{98.78,128.01},{ 5.42,45.75},{49.43,73.67},
  {36.43,61.97},{25.45,59.56},{62.07,107.62},{ 1.85, 1.08},
  {22.47,57.37},{65.14,104.10},{81.68,124.48},{49.74,81.14},
  {24.74,67.98},{81.19,114.82},{22.01,42.88},{21.87,66.80},
  {24.32,51.31},{40.73,64.87},{85.39,117.39},{99.84,130.84},
  {89.94,110.06},{11.34,37.57},{15.66,43.89},{21.86,43.02},
  {56.84,92.01},{70.79,109.34},{ 9.56,41.21},{45.49,76.47},
  {69.82,98.03},{ 0.68,30.24},{44.05,111.12},{20.73,62.02},
  {58.79,87.31},{ 0.25,22.01},{66.61,111.75},{27.29,65.91},
  {64.23,111.56},{35.20,62.31},{36.66,81.64},{32.06,76.79},
  {11.70,44.02},{12.70,59.81},{30.92,63.30},{69.53,106.64},
  {25.42,32.71},{75.51,109.91},{74.45,111.39},{83.26,125.38},
  {51.09,81.88},{14.50,50.64},{46.19,85.17},{50.28,81.00},
  {51.74,111.03},{19.15,47.39},{ 6.62,52.12},{83.28,116.55},
  {24.57,64.07},{96.86,140.23},{36.35,99.61},{86.02,127.51},
  { 0.05,41.28},{55.84,87.11},{73.81,111.87},{79.97,132.52},
  {80.95,115.80},{25.94,53.39},{45.79,80.87},{12.62,54.74},
  {67.76,119.85},{14.06,50.09},{58.02,93.00},{55.61,97.31},
  {92.22,132.14},{88.79,133.96},{82.43,130.24},{96.46,130.65},
  {41.90,61.25},{ 2.27,32.10},{36.70,67.17},{90.89,133.39},
  {80.96,113.41},{46.55,68.11},{10.87,42.11},{51.80,92.48},
  { 8.46,31.79},{52.76,77.57},{19.83,63.87},{46.78,87.26},
  {10.15,14.95},{48.00,75.03},{85.88,125.50},{69.24,96.36},
  {23.04,61.58},{79.99,109.31},{33.67,68.16},{ 4.70,34.15},
  {61.83,101.19},{76.25,110.46},{83.68,112.22},{21.52,57.67},
  {72.25,110.78},{51.48,86.33},{86.99,122.27},{12.42,33.53},
  {76.19,107.34},{16.72,48.04},{49.31,59.84},{10.03,40.51},
  {91.11,129.19},{70.49,111.54},{17.74,61.65},{78.79,117.17},
  {16.81,55.70},{31.53,67.73},{43.22,88.99},{56.03,102.01},
  {33.13,80.87},{19.83,56.99},{38.78,67.60},{33.66,80.33},
  {47.47,69.57},{94.55,143.95},{99.35,142.97},{22.15,48.34},
  {88.30,111.71},{66.22,130.98},{57.05,80.07},{ 0.71,20.71},
  {74.40,128.40},{70.38,114.90},{31.95,61.31},{ 5.10,36.77},
  { 4.21,35.84},{65.62,103.20},{ 7.67,51.22},{66.40,98.34},
  {64.63,98.42},{53.82,96.89},{54.77,81.23},{60.46,97.21},
  {42.49,96.46},{ 9.50,33.58},{ 8.11,44.04},{40.20,62.45},
  {11.03,53.23},{96.17,129.36},{94.16,136.40},{82.10,113.67},
  {42.86,67.55},{ 9.28,49.54},{67.46,83.96},{38.59,68.58},
  {34.09,52.84},{79.80,106.27},{56.32,106.17},{20.61,47.76},
  {22.06,64.25},{35.96,70.64},{12.49,30.40},{17.24,50.23},
  {34.22,80.32},{17.78,41.95},{43.45,84.58},{76.12,101.20},
  {38.00,66.47},{71.81,118.38},{68.21,111.27},{59.81,90.14},
  {99.87,125.63},{74.76,95.95},{ 7.87,51.92},{83.25,115.00},
  {12.50,57.32},{71.77,106.42},{67.97,110.25},{21.96,53.06},
  {86.72,125.71},{37.90,81.30},{16.89,50.69},{43.52,90.65},
  {33.71,70.99},{45.15,87.54},{97.23,129.50},{ 5.85,11.96},
  {67.18,98.25},{62.84,108.96},{37.23,83.34},{93.22,134.68},
  { 0.02,30.72},{20.85,56.61},{40.12,72.75},{76.88,91.67},
  {73.80,109.78},{30.25,58.43},{17.66,57.04},{65.87,98.37},
  {34.99,59.52},{73.02,115.45},{ 7.38,49.85},{22.52,46.14},
  {90.51,114.60},{53.37,82.30},{36.40,60.14},{27.46,54.74},
  { 8.68,20.17},{ 4.25,19.95},{26.96,63.71},{39.20,91.31},
  {17.85,59.22},{92.75,117.65},{35.14,60.78},{69.97,98.10},
  {59.31,90.93},{93.95,157.29},{48.64,86.90},{30.94,64.23},
  {88.51,119.82},{23.59,52.46},{84.88,135.91},{54.30,94.62},
  {16.90,35.86},{89.84,121.84},{35.61,75.77},{20.39,48.77},
  { 8.06,41.27},{50.32,77.86},{47.44,89.91},{11.38,28.04},
  { 5.54,36.67},{44.45,65.78},{61.46,88.28},{35.10,80.69},
  {54.26,94.41},{31.56,77.15},{72.35,111.07},{42.50,79.59},
  {37.91,86.60},{36.52,62.67},{49.28,96.70},{34.56,84.47},
  {92.95,145.64},{49.25,83.05},{87.40,112.45},{43.03,96.44},
  {19.10,48.86},{28.75,70.50},{36.80,81.74},{94.73,128.92},
  {83.60,107.24},{ 4.39,39.96},{ 3.15,40.00},{30.18,34.12},
  {98.43,137.12},{26.07,43.67},{79.79,132.04},{56.74,75.55},
  {10.77,41.45},{33.87,76.15},{95.54,134.71},{97.26,143.74},
  {66.13,88.73},{51.02,77.93},{52.22,87.21},{85.65,128.58},
  { 4.46,47.72},{92.20,138.26},{46.51,78.46},{69.64,92.41},
  {69.22,118.77},{82.09,118.86},{30.90,72.28},{22.69,56.93},
  {60.51,93.07},{ 9.46,30.38},{59.35,79.46},{89.18,124.95},
  { 2.24,23.63},{90.38,143.27},{70.52,136.81},{49.83,76.39},
  {62.62,100.97},{15.10,46.18},{20.86,43.67},{71.03,115.72},
  {10.42,23.53},{22.24,63.83},{64.14,104.10},{62.14,113.81},
  {34.27,83.00},{30.78,70.31},{76.30,112.15},{62.48,101.74},
  {18.70,52.65},{34.22,61.44},{59.99,106.34},{64.38,109.00},
  {91.57,136.33},{ 8.88,33.29},{74.90,113.41},{85.26,118.22},
  {45.86,81.27},{63.72,99.11},{58.01,88.11},{23.03,55.87},
  {76.54,104.12},{49.94,81.37},{51.70,81.04},{10.60,41.01},
  {96.24,136.95},{69.96,100.65},{94.14,130.05},{ 2.30,51.14},
  { 9.04,38.79},{44.95,93.23},{37.11,70.49},{42.96,71.55},
  {77.37,112.48},{26.35,61.63},{55.20,84.12},{78.18,122.58},
  {87.76,132.66},{97.71,144.61},{32.94,79.64},{43.19,69.60},
  {52.64,96.71},{93.11,136.27},{82.88,127.13},{ 9.76,34.52},
  { 6.27,29.27},{93.42,128.51},{16.53,46.56},{46.63,84.07},
  {89.24,129.61},{90.53,128.83},{30.39,57.73},{43.63,90.07},
  {53.08,95.59},{16.05,60.09},{ 0.53,36.14},{65.39,118.78},
  {89.72,136.78},{53.86,94.94},{25.68,50.80},{89.21,127.19},
  { 5.12,40.08},{27.50,56.84},{40.56,66.21},{97.47,143.93},
  {78.94,127.15},{19.28,55.64},{ 4.22,35.54},{98.28,148.04},
  {46.04,81.66},{19.82,50.62},{99.40,138.49},{43.07,57.26},
  {67.27,109.65},{23.99,62.49},{45.98,71.80},{89.84,133.27},
  {44.35,83.08},{23.73,46.67},{ 3.78,57.80},{82.53,125.86},
  {22.20,42.87},{80.17,130.25},{72.42,109.67},{98.11,127.35},
  {64.13,108.07},{25.55,63.47},{34.50,55.33},{86.89,136.62},
  { 2.55,23.55},{53.55,86.20},{82.61,111.69},{98.28,149.93},
  {67.96,119.39},{55.44,90.01},{92.62,138.20},{63.05,123.03},
  {47.80,83.73},{72.65,118.21},{99.76,121.95},{65.60,109.46},
  {57.32,99.05},{ 2.91,25.35},{50.78,79.98},{30.51,60.33},
  {66.72,90.11},{17.77,45.17},{41.06,85.22},{29.88,68.16},
  { 2.40,22.79},{99.89,152.70},{58.07,91.46},{72.13,99.98},
  {75.04,99.67},{68.16,105.94},{ 2.30, 9.85},{94.97,134.07},
  {28.66,80.23},{ 4.52,41.33},{77.24,117.10},{36.24,64.77},
  {30.33,67.71},{79.10,108.07},{66.87,117.90},{18.70,29.48},
  {61.29,85.22},{39.21,75.00},{81.99,114.20},{75.72,99.86},
  {82.18,108.55},{18.71,39.70},{78.85,131.66},{39.95,68.61},
  {37.73,67.67},{83.18,133.05},{95.64,130.99},{36.23,72.36},
  {56.04,87.42},{39.32,73.21},{88.45,132.44},{71.41,117.23},
  {42.98,66.83},{96.92,141.27},{53.24,90.27},{34.06,57.84},
  {86.69,119.91},{89.69,118.76},{99.40,135.59},{85.75,120.06},
  {95.47,145.69},{12.19,59.44},{62.06,90.38},{35.49,66.18},
  {39.90,56.52},{56.66,100.89},{82.00,125.16},{15.95,38.99},
  { 5.38,31.87},{67.92,91.98},{98.98,151.72},{ 2.15,27.30},
  {19.03,40.45},{94.90,142.41},{ 0.67,23.73},{98.15,138.25},
  {50.71,70.52},{80.42,124.17},{30.03,76.11},{35.67,60.26},
  {17.61,46.21},{ 9.02,32.92},{58.37,91.11},{ 3.44,40.79},
  {14.39,18.83},{ 5.66,36.62},{14.27,60.82},{83.36,123.44},
  { 4.00,27.01},{26.80,63.17},{72.30,96.68},{72.09,127.51},
  {57.75,92.66},{ 6.50,43.22},{38.64,71.12},{95.82,121.53},
  {50.91,78.79},{18.01,46.48},{14.56,37.77},{48.75,81.69},
  {27.03,60.40},{46.10,81.08},{19.05,48.60},{14.04,47.91},
  {83.08,125.66},{49.22,92.10},{89.06,135.78},{54.42,108.24},
  {87.16,130.50},{60.90,110.81},{72.29,124.80},{79.96,106.71},
  {68.41,118.46},{84.76,104.03},{96.40,135.76},{59.76,80.37},
  {29.19,74.90},{80.01,99.83},{97.02,145.13},{87.86,124.36},
  {46.43,86.94},{15.52,52.42},{61.92,102.38},{24.39,63.32},
  {78.96,119.67},{56.16,105.14},{86.63,129.72},{67.21,80.26},
  {21.06,47.66},{ 7.17,42.97},{83.01,126.81},{48.46,90.84},
  {44.48,70.76},{65.19,98.26},{90.25,118.36},{38.07,80.24},
  {37.94,74.99},{89.57,142.89},{ 0.90,60.27},{58.95,72.82},
  { 7.55,58.33},{15.08,52.77},{16.42,46.33},{96.79,142.15},
  { 1.20,37.18},{ 7.15,41.39},{88.10,122.37},{74.12,115.21},
  {23.48,43.20},{66.45,101.69},{67.50,112.76},{40.79,67.20},
  {97.89,143.10},{58.46,100.12},{86.84,141.21},{29.34,67.57},
  { 4.35,45.85},{ 7.95,50.82},{45.97,89.31},{62.14,95.93},
  {11.32,57.47},{36.53,56.51},{46.37,89.27},{44.20,80.22},
  {23.27,64.75},{22.08,53.15},{69.36,89.48},{96.13,138.69},
  { 6.58,37.97},{59.71,100.31},{70.33,101.83},{71.33,104.21},
  {20.12,50.78},{59.47,86.83},{98.15,136.89},{ 2.50,35.96},
  { 8.45,33.38},{59.35,110.74},{26.15,55.02},{70.79,127.16},
  {32.64,88.59},{67.44,116.92},{20.82,64.57},{85.07,123.61},
  {37.02,66.14},{16.67,41.49},{28.11,53.12},{71.62,102.00},
  { 9.73,40.82},{62.60,94.55},{59.83,102.03},{88.10,109.45},
  {57.33,92.74},{55.39,109.29},{92.38,117.08},{78.09,130.24},
  {95.04,138.56},{23.79,47.33},{80.20,111.03},{17.85,52.49},
  {73.59,106.15},{39.74,95.07},{94.84,128.27},{71.99,91.99},
  {56.24,115.39},{99.41,118.85},{ 3.86,39.05},{70.93,118.63},
  {54.59,96.03},{ 6.98,44.65},{15.49,60.38},{16.53,42.92},
  {11.69,40.70},{76.34,108.40},{21.13,42.93},{36.87,87.47},
  {13.18,54.59},{80.94,115.97},{21.66,59.48},{ 6.57,36.66},
  {30.07,51.05},{15.70,57.10},{90.22,130.29},{63.06,97.59},
  {38.32,89.03},{ 6.24,45.37},{28.74,72.37},{51.08,89.46},
  {83.73,132.22},{89.47,128.66},{52.96,70.62},{64.21,102.32},
  {79.77,106.59},{65.28,97.82},{68.02,96.98},{35.68,63.30},
  {88.49,125.58},{87.00,117.82},{46.68,88.34},{80.27,130.06},
  { 5.86,37.42},{91.43,140.75},{34.66,74.60},{11.64,38.73},
  {89.50,120.61},{74.72,110.05},{64.76,126.70},{82.79,124.26},
  {80.76,122.14},{10.03,24.46},{ 7.99,49.56},{71.82,97.91},
  {66.08,123.61},{92.65,116.25},{ 9.84,34.96},{55.02,86.90},
  { 4.90,36.88},{ 2.99,49.89},{18.37,45.69},{86.79,131.40},
  {31.98,61.04},{11.25,39.39},{14.23,51.26},{ 7.00,49.52},
  {12.79,50.64},{93.34,142.92},{14.56,55.30},{ 1.36,44.86},
  {39.95,50.68},{46.62,76.76},{32.22,80.11},{11.84,49.74},
  {20.67,56.73},{96.29,133.37},{67.82,96.63},{ 1.12,34.98},
  {72.72,113.55},{51.74,79.73},{57.91,82.88},{70.49,87.78},
  {30.42,75.80},{30.00,49.25},{46.33,81.17},{86.32,107.82},
  { 8.94,37.41},{71.59,78.68},{95.60,142.61},{66.85,107.33},
  {39.97,76.00},{78.91,109.51},{61.46,113.58},{ 7.78,55.60},
  {58.43,94.30},{73.76,114.08},{62.44,107.76},{31.49,52.35},
  {48.13,82.49},{79.76,138.97},{42.20,66.12},{23.96,42.34},
  {99.34,132.51},{35.49,84.22},{51.36,94.43},{58.05,105.06},
  {16.60,29.11},{53.17,95.70},{71.33,126.53},{84.70,115.20},
  {28.80,76.47},{49.29,87.33},{ 2.18,37.63},{66.44,97.07},
  {58.53,96.12},{65.98,105.79},{44.40,80.38},{59.24,107.15},
  {13.62,45.20},{44.51,82.51},{77.03,130.94},{59.59,103.55},
  {97.40,141.07},{58.99,94.94},{88.86,122.28},{12.20,45.50},
  {51.71,80.04},{88.59,123.42},{69.88,113.17},{ 1.16,42.94},
  {34.08,54.28},{ 9.32,26.82},{11.33,47.60},{93.69,140.01},
  {93.51,126.66},{60.50,90.91},{61.97,96.68},{ 9.44,39.23},
  {30.70,68.86},{31.11,60.61},{73.91,115.70},{87.67,136.37},
  {58.40,82.14},{45.16,79.46},{71.18,80.79},{19.44,50.76},
  {99.42,144.45},{67.64,106.86},{35.88,78.04},{68.90,136.79},
  {24.91,54.57},{22.51,67.57},{49.85,80.31},{63.67,108.11},
  {67.44,102.87},{10.25,62.81},{65.47,97.94},{30.56,50.89},
  {41.56,64.02},{10.09,44.75},{92.91,127.59},{88.14,139.96},
  { 2.33,37.08},{99.25,144.57},{26.23,57.89},{ 5.86,30.05},
  {51.97,98.88},{63.41,95.68},{60.10,93.67},{95.34,150.97},
  {55.30,103.24},{63.37,95.68},{79.53,105.33},{10.67,37.08},
  {43.44,75.54},{30.69,55.63},{94.48,135.50},{33.07,67.47},
  {19.59,62.40},{68.53,107.23},{15.59,42.99},{90.55,131.59},
  {22.43,66.53},{41.50,72.21},{34.30,77.95},{54.27,113.13},
  {31.89,81.30},{48.53,76.03},{46.03,79.07},{12.67,44.36},
  {88.73,127.08},{57.63,94.21},{96.43,137.06},{24.18,66.87},
  {94.17,134.92},{40.44,84.72},{ 6.88,36.82},{37.40,80.81},
  {40.86,67.83},{ 8.02,52.88},{ 4.29,17.26},{79.35,132.97},
  {83.66,117.99},{64.19,94.48},{ 4.95,23.02},{72.11,123.93},
  {43.29,74.70},{48.62,74.92},{29.24,62.12},{93.94,151.96},
  {75.15,126.68},{84.68,119.27},{ 0.00,40.86},{ 7.82,49.87},
  {61.80,103.04},{38.81,62.37},{71.06,110.07},{48.24,80.77},
  {28.58,76.85},{ 5.92,32.67},{21.48,45.33},{78.56,131.61},
  {67.15,93.29},{ 6.82,49.66},{77.85,112.57},{88.00,132.33},
  {22.69,39.34},{93.81,135.63},{67.53,104.05},{64.18,93.75},
  {24.40,62.80},{77.88,106.70},{ 6.88,47.88},{80.95,132.76},
  {80.01,102.53},{58.29,96.48},{58.44,93.06},{30.65,78.46},
  {30.69,56.85},{90.58,143.37},{ 9.54,45.31},{19.14,48.46},
  {11.11,30.65},{65.64,117.55},{87.68,139.32},{55.10,97.72},
  {58.25,83.49},{98.54,129.12},{54.80,96.41},{75.74,112.95},
  {81.75,115.13},{83.67,107.43},{80.51,118.77},{15.02,47.60},
  {75.20,109.14},{95.42,131.44},{76.60,130.11},{27.66,60.66},
  {89.43,137.46},{59.59,94.03},{68.03,107.63},{44.94,75.77},
  {97.25,132.84},{46.26,65.32},{38.88,97.96},{57.18,97.30},
  {18.93,62.65},{ 3.75,21.68},{49.56,77.42},{39.61,77.05},
  {69.18,102.75},{58.27,94.45},{ 1.82,27.82},{52.54,81.93},
  {49.54,66.81},{41.75,87.30},{92.52,122.21},{96.28,156.62},
  {96.70,145.80},{ 6.84,48.97},{71.71,131.32},{84.63,117.96},
  {26.22,47.12},{75.15,108.17},{ 2.88,25.42},{41.59,93.59},
  {55.66,78.63},{27.12,71.20},{80.13,118.94},{59.52,95.82},
  {52.65,93.72},{16.97,35.73},{ 9.43,48.24},{11.71,55.13},
  { 9.30,46.23},{85.00,125.44},{12.00,41.45},{75.97,114.09},
  {96.48,143.44},{30.98,47.06},{96.34,140.61},{52.30,86.84},
  {36.45,54.15},{89.95,121.50},{99.68,146.29},{53.68,86.46},
  {88.17,120.91},{20.95,60.61},{71.57,97.83},{70.60,108.36},
  {20.98,49.15},{22.55,53.02},{42.64,82.82},{67.45,111.34},
  { 3.91,40.60},{94.06,118.31},{ 4.39,39.14},{25.39,52.71},
  {43.58,91.27},{63.65,93.31},{83.36,123.06},{30.96,65.58},
  {51.71,90.85},{10.78,35.24},{30.17,56.11},{22.79,56.65},
  {94.05,143.42},{74.41,116.96},{89.16,141.41},{86.30,129.48},
  {33.46,62.67},{33.59,93.96},{50.41,107.05},{19.10,61.85},
  {66.10,122.19},{21.92,74.51},{45.83,77.94},{84.48,116.26},
  { 7.02,44.63},{ 6.24,33.73},{63.14,112.67},{12.72,54.66},
  {77.56,118.55},{21.49,68.00},{43.79,101.03},{90.39,116.56},
  {52.02,76.65},{75.59,127.31},{ 4.13,40.09},{38.67,76.41},
  { 1.44,21.54},{89.87,137.76},{93.09,118.45},{69.08,116.83},
  {39.02,85.56},{ 2.77,26.54},{98.26,130.85},{69.94,102.69},
  {16.88,41.94},{23.36,51.67},{28.57,57.49},{30.32,68.20},
  {55.56,90.01},{68.63,102.29},{77.93,118.49},{62.59,115.24},
  {84.44,122.07},{28.85,59.61},{67.58,107.20},{94.78,137.13},
  {42.41,58.06},{85.98,102.66},{69.50,108.50},{ 5.94,54.64},
  {46.33,93.94},{97.01,134.77},{45.11,74.00},{ 2.88,30.02},
  {71.87,105.24},{ 9.66,43.40},{95.74,126.35},{99.10,137.37},
  {21.97,52.89},{65.30,94.66},{20.16,68.47},{ 8.03,28.56},
  {25.42,55.87},{31.36,68.51},{82.24,127.48},{64.51,90.01},
  {92.83,125.44},{20.66,42.55},{ 1.65,35.93},{56.49,102.53},
  {68.91,104.59},{ 7.00,23.73},{17.92,52.30},{81.51,134.23},
  {53.19,82.77},{77.14,114.74},{63.24,106.36},{67.63,110.29},
  {98.66,132.52},{10.41,47.43},{16.23,49.49},{ 4.49,43.28}
};

double residual_error(double a, double y, double m, double c) {
  double e = (m * a) + c - y;
  return e * e;
}

__device__ double d_residual_error(double a, double y, double m, double c) {
  double e = (m * a) + c - y;
  return e * e;
}

double RmsError(double m, double c) {
  int i;
  double mean;
  double error_sum = 0;
  
  for(i=0; i<n_data; i++) {
    error_sum += residual_error(data[i].a, data[i].y, m, c);
  }
  
  mean = error_sum / n_data;
  
  return sqrt(mean);
}

__global__ void d_RmsError(double *m, double *c, double *error_sum_arr, point_t *d_data) {
	/*
		Calculate the current index by using:
		- The thread id
		- The block id
		- The number of threads per block
	*/
	int i = threadIdx.x + blockIdx.x * blockDim.x;

	//Work out the error sum 1000 times and store them in an array.
  error_sum_arr[i] = d_residual_error(d_data[i].a, d_data[i].y, *m, *c);
}

int time_difference(struct timespec *start, struct timespec *finish, 
                              long long int *difference) {
  long long int ds =  finish->tv_sec - start->tv_sec; 
  long long int dn =  finish->tv_nsec - start->tv_nsec; 

  if(dn < 0 ) {
    ds--;
    dn += 1000000000; 
  } 
  *difference = ds * 1000000000 + dn;
  return !(*difference > 0);
}

int main() {
  int i;
  double bm = 1.3;
  double bc = 10;
  double be;
  double dm[8];
  double dc[8];
  double e[8];
  double step = 0.01;
  double best_error = 999999999;
  int best_error_i;
  int minimum_found = 0;
  
  double om[] = {0,1,1, 1, 0,-1,-1,-1};
  double oc[] = {1,1,0,-1,-1,-1, 0, 1};

	struct timespec start, finish;   
  long long int time_elapsed;

	//Get the system time before we begin the linear regression.
  clock_gettime(CLOCK_MONOTONIC, &start);

	cudaError_t error;

	//Device variables
	double *d_dm;
  double *d_dc;
	double *d_error_sum_arr;
	point_t *d_data;
	
  be = RmsError(bm, bc);

	//Allocate memory for d_dm
	error = cudaMalloc(&d_dm, (sizeof(double) * 8));
 	if(error){
   	fprintf(stderr, "cudaMalloc on d_dm returned %d %s\n", error,
    	cudaGetErrorString(error));
   	exit(1);
 	}
	
	//Allocate memory for d_dc
	error = cudaMalloc(&d_dc, (sizeof(double) * 8));
 	if(error){
   	fprintf(stderr, "cudaMalloc on d_dc returned %d %s\n", error,
  	  cudaGetErrorString(error));
   	exit(1);
 	}
	
	//Allocate memory for d_error_sum_arr
	error = cudaMalloc(&d_error_sum_arr, (sizeof(double) * 1000));
 	if(error){
   	fprintf(stderr, "cudaMalloc on d_error_sum_arr returned %d %s\n", error,
   	  cudaGetErrorString(error));
   	exit(1);
 	}

	//Allocate memory for d_data
	error = cudaMalloc(&d_data, sizeof(data));
 	if(error){
   	fprintf(stderr, "cudaMalloc on d_data returned %d %s\n", error,
   	  cudaGetErrorString(error));
   	exit(1);
 	}

  while(!minimum_found) {
    for(i=0;i<8;i++) {
      dm[i] = bm + (om[i] * step);
      dc[i] = bc + (oc[i] * step);    
    }

		//Copy memory for dm to d_dm
  	error = cudaMemcpy(d_dm, dm, (sizeof(double) * 8), cudaMemcpyHostToDevice);  
  	if(error){
    	fprintf(stderr, "cudaMemcpy to d_dm returned %d %s\n", error,
      cudaGetErrorString(error));
  	}

		//Copy memory for dc to d_dc
  	error = cudaMemcpy(d_dc, dc, (sizeof(double) * 8), cudaMemcpyHostToDevice);  
  	if(error){
    	fprintf(stderr, "cudaMemcpy to d_dc returned %d %s\n", error,
      cudaGetErrorString(error));
  	}

		//Copy memory for data to d_data
  	error = cudaMemcpy(d_data, data, sizeof(data), cudaMemcpyHostToDevice);  
  	if(error){
    	fprintf(stderr, "cudaMemcpy to d_data returned %d %s\n", error,
      cudaGetErrorString(error));
  	}
		
    for(i=0;i<8;i++) {
			//Host variable storing the array returned from the kernel function.
			double h_error_sum_arr[1000];
			
			//Stores the total sum of the values from the error sum array.
			double error_sum_total;

			//Stores the mean of the total sum of the error sums.
			double error_sum_mean;

			//Call the RmsError function using 100 blocks and 10 threads.
			d_RmsError <<<100,10>>>(&d_dm[i], &d_dc[i], d_error_sum_arr, d_data);
			cudaThreadSynchronize();

			//Copy memory for d_error_sum_arr
		  error = cudaMemcpy(&h_error_sum_arr, d_error_sum_arr, (sizeof(double) * 1000), cudaMemcpyDeviceToHost);  
		  if(error){
	    fprintf(stderr, "cudaMemcpy to error_sum returned %d %s\n", error,
	      cudaGetErrorString(error));
		  }

			//Loop through the error sum array returned from the kernel function
			for(int j=0; j<n_data; j++) {
				//Add each error sum to the error sum total.
    		error_sum_total += h_error_sum_arr[j];
  		}

			//Calculate the mean for the error sum.
			error_sum_mean = error_sum_total / n_data;

			//Calculate the square root for the error sum mean.
			e[i] = sqrt(error_sum_mean);

      if(e[i] < best_error) {
        best_error = e[i];
        best_error_i = i;
      }

			//Reset the error sum total.
			error_sum_total = 0;
    }

    //printf("best m,c is %lf,%lf with error %lf in direction %d\n", 
      //dm[best_error_i], dc[best_error_i], best_error, best_error_i);

    if(best_error < be) {
      be = best_error;
      bm = dm[best_error_i];
      bc = dc[best_error_i];
    } else {
      minimum_found = 1;
    }
  }

	//Free memory for d_dm
	error = cudaFree(d_dm);
	if(error){
		fprintf(stderr, "cudaFree on d_dm returned %d %s\n", error,
	  	cudaGetErrorString(error));
		exit(1);
	}
	
	//Free memory for d_dc
	error = cudaFree(d_dc);
	if(error){
		fprintf(stderr, "cudaFree on d_dc returned %d %s\n", error,
			cudaGetErrorString(error));
		exit(1);
	}

	//Free memory for d_data
	error = cudaFree(d_data);
	if(error){
		fprintf(stderr, "cudaFree on d_data returned %d %s\n", error,
	  	cudaGetErrorString(error));
	 	exit(1);
	}
		
	//Free memory for d_error_sum_arr
	error = cudaFree(d_error_sum_arr);
	if(error){
		fprintf(stderr, "cudaFree on d_error_sum_arr returned %d %s\n", error,
	  	cudaGetErrorString(error));
	 	exit(1);
	}

  printf("minimum m,c is %lf,%lf with error %lf\n", bm, bc, be);

	//Get the system time after we have run the linear regression function.
	clock_gettime(CLOCK_MONOTONIC, &finish);

	//Calculate the time spent between the start time and end time.
  time_difference(&start, &finish, &time_elapsed);

	//Output the time spent running the program.
  printf("Time elapsed was %lldns or %0.9lfs\n", time_elapsed, 
         (time_elapsed/1.0e9));
	
  return 0;
}
